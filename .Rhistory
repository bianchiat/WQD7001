shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/Desktop/New folder/WQD7001 GROUP ASSIGNMENT/R Code")
runApp()
runApp()
setwd("~/Desktop/New folder/WQD7001 GROUP ASSIGNMENT/R Code")
runApp()
runApp('C:/Sem II, 2018.2019/WQD7001 Principles of Data Science/WQD7001 GROUP ASSIGNMENT/R Code')
runApp()
# From http://data.okfn.org/data/datasets/geo-boundaries-world-110m
geojson<- geojsonio::geojson_read("countries.geojson",
what = "sp")
Country <-as.character(geojson$admin)
pop_est <-as.numeric(as.character(geojson$pop_est))
#Segregate Country and Popdata from list
Df<-cbind(Country,pop_est)
#head(Df)
Df1<-as.data.frame(Df)
#str(Df1)
Df1$pop_est<-as.numeric(as.character(Df1$pop_est))
Df1$Country<-as.character(Df1$Country)
#Read csv file
df<-read.csv("TB Combined dataset_3.csv",na.strings = NA,fill = NA)
#filter relevant data
df1<-df %>%
filter(Year=="2015")%>%
group_by(Country)
#head(Df1)
#head(df1)
dff<-left_join(Df1,df1, by="Country")
#show top 10 country with most success rate new TB.cases
dff%>%
arrange(desc(TB_Death_HIV-per100k_pop))%>%
top_n(10)
runApp()
# From http://data.okfn.org/data/datasets/geo-boundaries-world-110m
geojson<- geojsonio::geojson_read("countries.geojson",
what = "sp")
Country <-as.character(geojson$admin)
pop_est <-as.numeric(as.character(geojson$pop_est))
#Segregate Country and Popdata from list
Df<-cbind(Country,pop_est)
#head(Df)
Df1<-as.data.frame(Df)
#str(Df1)
Df1$pop_est<-as.numeric(as.character(Df1$pop_est))
Df1$Country<-as.character(Df1$Country)
#Read csv file
df<-read.csv("TB Combined dataset_3.csv",na.strings = NA,fill = NA)
#filter relevant data
df1<-df %>%
filter(Year=="2015")%>%
group_by(Country)
#head(Df1)
#head(df1)
dff<-left_join(Df1,df1, by="Country")
#show top 10 country with most success rate new TB.cases
dff%>%
arrange(desc(TB_Death_HIVneg(per100k_pop)))%>%
top_n(10)
#show top 10 country with most success rate new TB.cases
dff%>%
arrange(desc("TB_Death_HIVneg(per100k_pop)"))%>%
top_n(10)
runApp()
# From http://data.okfn.org/data/datasets/geo-boundaries-world-110m
geojson<- geojsonio::geojson_read("countries.geojson",
what = "sp")
Country <-as.character(geojson$admin)
pop_est <-as.numeric(as.character(geojson$pop_est))
#Segregate Country and Popdata from list
Df<-cbind(Country,pop_est)
#head(Df)
Df1<-as.data.frame(Df)
#str(Df1)
Df1$pop_est<-as.numeric(as.character(Df1$pop_est))
Df1$Country<-as.character(Df1$Country)
#Read csv file
df<-read.csv("TB Combined dataset_3.csv",na.strings = NA,fill = NA)
#filter relevant data
df1<-df %>%
filter(Year=="2015")%>%
group_by(Country)
#head(Df1)
#head(df1)
dff<-left_join(Df1,df1, by="Country")
#show top 10 country with most success rate new TB.cases
dff%>%
arrange(desc(TB_Death_HIVneg_per100k_pop))%>%
top_n(10)
summary(dff)
dff%>%
transmute(log10DeathTB=log10(TB_Death_HIVneg_per100k_pop))%>%
summary(log10DeathTB)
dff2<-dff%>%
mutate(TB_Death_HIVneg_per100k_pop) = replace(TB_Death_HIVneg_per100k_pop,TB_Death_HIVneg_per100k_pop<1 ,1)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(dff)
summary(log10DeathTB)
?trasnmute
?transmute
View(dff)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?renderTable
runApp()
runApp()
runApp()
runApp()
?sort
runApp()
runApp()
runApp()
runApp()
newdata <- mtcars[order(mpg),]
newdata <- mtcars[order(mpg),]
attach(mtcars)
newdata <- mtcars[order(mpg),]
View(newdata)
dff2[order(input$TB_Death_HIVneg_per100k_pop),]
dff2[order(TB_Death_HIVneg_per100k_pop),]
View(dff2)
dff2[order(TB_Death_HIVneg_per100k_pop),]
attach(mtcars)
(mtcars)
dff2[order(TB_Death_HIVneg_per100k_pop),]
?order
runApp()
abc<- dff2[order(TB_Death_HIVneg_per100k_pop),]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dff2[order(TB_Death_HIVneg_per100k_pop),]
dff2[order(TB_Death_HIVneg_per100k_pop),]
order(dff2$TB_Death_HIVneg_per100k_pop)
abc<- order(dff2$TB_Death_HIVneg_per100k_pop)
tail(abc,10)
abc<- dff2[order(TB_Death_HIVneg_per100k_pop)
]
abc<- dff2[order(dff2$TB_Death_HIVneg_per100k_pop)]
abc<- dff2[order(dff2$TB_Death_HIVneg_per100k_pop),]
View(abc)
tail(abc,10)
abc<- dff2[order(dff2$TB_Death_HIVneg_per100k_pop,na.last=FALSE),]
tail(abc,10)
abc<- dff2[order(-dff2$TB_Death_HIVneg_per100k_pop,na.last=FALSE),]
head(abc,10)
abc<- dff2[order(-dff2$TB_Death_HIVneg_per100k_pop,na.last=TRUE),]
head(abc,10)
runApp()
runApp()
runApp()
runApp()
runApp()
?renderTable
runApp()
runApp()
runApp()
abc<- dff2[order(-dff2$TB_Death_HIVneg_per100k_pop,na.last=TRUE),]
View(abc)
order(-dff2$TB_Death_HIVneg_per100k_pop,na.last=TRUE)
abc<- dff2[order(-dff2$TB_Death_HIVneg_per100k_pop,na.last=TRUE),]
abcd<- abc[, c("Country", dff2$TB_Death_HIVneg_per100k_pop), drop = FALSE])
abcd<- abc[, c("Country", dff2$TB_Death_HIVneg_per100k_pop), drop = FALSE]
runApp()
runApp()
runApp()
runApp()
runApp()
abc<- dff2[order(-dff2$TB_Death_HIVneg_per100k_pop,na.last=TRUE),]
head(abc,10)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
